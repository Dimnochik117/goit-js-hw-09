{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAWC,SAASC,cAAc,qBAClCC,EAAYF,SAASC,cAAc,sBACnCE,EAAUH,SAASC,cAAc,oBA+BvC,SAASG,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EAEFF,EAAQ,CAACH,WAAUC,UAGnBG,EAAO,CAACJ,WAAUC,S,GAEnBA,E,IAzCSN,SAASC,cAAc,SAE/Ba,iBAAiB,UAEzB,SAAoBC,GAClBA,EAAEC,iBACF,IAAIC,EAAW,EACXC,EAAY,EAChB,GAAIC,OAAQpB,EAASqB,OAAS,GAAQD,OAAOhB,EAAQiB,OAAS,EAGxD,OAFFC,QAAQC,IAAIH,OAAOpB,EAASqB,OAAQD,OAAOhB,EAAQiB,aACnDG,EAAA1B,GAAS2B,OAAOC,QAAS,iCAG3B,IAAK,IAAIC,EAAI,EAAGA,EAAIxB,EAAUkB,MAAOM,IAAK,CAC1CT,GAAY,EAEZ,IAAMU,EAAeR,OAAOpB,EAASqB,OAASF,EAC9CA,GAAaC,OAAOhB,EAAQiB,OAC5BhB,EAAca,EAAUU,GACrBC,MAAK,SAAAC,G,IAAGxB,EAAQwB,EAARxB,SAAUC,EAAKuB,EAALvB,MACjBiB,EAAA1B,GAAS2B,OAAOM,QAAQ,uBAAwCC,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M,IAEvE0B,OAAM,SAAAH,G,IAAGxB,EAAQwB,EAARxB,SAAUC,EAAKuB,EAALvB,MAClBiB,EAAA1B,GAAS2B,OAAOC,QAAQ,sBAAqCM,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst delayRef = document.querySelector(\"input[name=delay]\")\nconst amountRef = document.querySelector(\"input[name=amount]\")\nconst stepRef = document.querySelector(\"input[name=step]\")\nconst formRef = document.querySelector(\".form\")\n\nformRef.addEventListener('submit', submitForm)\n\nfunction submitForm(e) {\n  e.preventDefault();\n  let startPos = 0;\n  let startTime = 0;\n  if ((Number(delayRef.value) < 0 ) || (Number(stepRef.value) < 0 )) {\n      console.log(Number(delayRef.value), Number(stepRef.value))\n      Notiflix.Notify.failure(`❌ Please enter correct values`);\n      return;\n  } else {\n    for (let i = 0; i < amountRef.value; i++) {\n    startPos += 1;\n    \n    const promiseDelay = Number(delayRef.value) + startTime;\n    startTime += Number(stepRef.value);\n    createPromise(startPos, promiseDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n  }\n  \n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => { \n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve({position, delay});\n      } else {\n        // Reject\n        reject({position, delay});\n      }\n    }, delay)\n  });\n  \n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$delayRef","document","querySelector","$ce04d3a99e08e73b$var$amountRef","$ce04d3a99e08e73b$var$stepRef","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","e","preventDefault","startPos","startTime","Number","value","console","log","$parcel$interopDefault","Notify","failure","i","promiseDelay","then","param","success","concat","catch"],"version":3,"file":"03-promises.5821f843.js.map"}